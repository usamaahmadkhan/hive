// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	startstop "github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/startstop"
	servers "github.com/gophercloud/gophercloud/openstack/compute/v2/servers"
	pagination "github.com/gophercloud/gophercloud/pagination"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ListServers mocks base method.
func (m *MockClient) ListServers(opts servers.ListOpts) pagination.Pager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", opts)
	ret0, _ := ret[0].(pagination.Pager)
	return ret0
}

// ListServers indicates an expected call of ListServers.
func (mr *MockClientMockRecorder) ListServers(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockClient)(nil).ListServers), opts)
}

// StartServer mocks base method.
func (m *MockClient) StartServer(serverId string) startstop.StartResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServer", serverId)
	ret0, _ := ret[0].(startstop.StartResult)
	return ret0
}

// StartServer indicates an expected call of StartServer.
func (mr *MockClientMockRecorder) StartServer(serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockClient)(nil).StartServer), serverId)
}

// StopServer mocks base method.
func (m *MockClient) StopServer(serverId string) startstop.StopResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServer", serverId)
	ret0, _ := ret[0].(startstop.StopResult)
	return ret0
}

// StopServer indicates an expected call of StopServer.
func (mr *MockClientMockRecorder) StopServer(serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServer", reflect.TypeOf((*MockClient)(nil).StopServer), serverId)
}
